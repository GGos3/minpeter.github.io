[{"content":"터미널을 쓰다보면 알록달록해서 예쁜게 마음에 드는거 같으면서도 글자만 나와서 심심하다. 몇몇 명령어는 조금 바뀌었으면 하는 부분도 있고..\n이번 글에서는 이런 부분을 약간 개선해보자.\nlogo-ls 설치 logo-ls는 go로 만든 오픈소스 프로그램이다.\ngithub에 올라와있다.\n심심한 ls 명령어와 다르게 각각 파일 옆에 아이콘을 출력해주어 약간은 예쁘게 보기도록 도와준다.\n설치하는 방법은 간단하다.\n릴리즈 페이지에서 제공하는 패키지 파일을 다운받아 설치해주면 끝이다.\n하지만 상황에 따라 추가로 해야되는 것이 있는데 폰트 설치이다.\n폰트가 설치되어있지 않으면 네모에 물음표가 떠있는 아이콘이 표시된다. 폰트는 이 사이트중 하나를 골라 설치해주자\n(fira code 추천)\n이후 logo-ls를 입력하면 잘 작동할 것이다.\n만약 마음에 든다면 alias를 이용해 ls 입력시 자동으로 작동하게 만들어보자\nbat 설치 bat는 cat을 대신해 제작된 프로그램이다.\ncat과 거희 동일하게 파일안에 내용을 출력해준다.\n단 약간의 차이가 존재하는데 문법 강조를 지원한다.\n보통 cat을 이용해 설정파일을 잠시 확인하는 용도를 사용하는데 문법 강조를 지원하니 정말 편하다.\n리눅스 배포판별로 약간식 차이는 존재하지만 거희 모든 배포판의 패키지 관리자를 지원한다.\n보통 apt install bat 형식\n깃허브에서 확인할 수 있다. 이후 설치가 완료되면 cat과 동일하게 사용하면된다.\n물론 cat 대신 alias로 등록해도 된다.\n(심볼릭링크를 만들라는 이야기도 있는데 일단은 패스) 마무리 terminal를 사용하면 할수록 예뻐지는거 같다.\n다음에는 어떤 편의성 툴을 알게될지 궁금하고, 좋은 정보가 있다면 포스팅하도록 하겠다.\n","permalink":"http://minpeter.github.io/posts/linux/2021-12-20-logo-ls-bat/","summary":"터미널을 쓰다보면 알록달록해서 예쁜게 마음에 드는거 같으면서도 글자만 나와서 심심하다. 몇몇 명령어는 조금 바뀌었으면 하는 부분도 있고..\n이번 글에서는 이런 부분을 약간 개선해보자.\nlogo-ls 설치 logo-ls는 go로 만든 오픈소스 프로그램이다.\ngithub에 올라와있다.\n심심한 ls 명령어와 다르게 각각 파일 옆에 아이콘을 출력해주어 약간은 예쁘게 보기도록 도와준다.\n설치하는 방법은 간단하다.\n릴리즈 페이지에서 제공하는 패키지 파일을 다운받아 설치해주면 끝이다.\n하지만 상황에 따라 추가로 해야되는 것이 있는데 폰트 설치이다.\n폰트가 설치되어있지 않으면 네모에 물음표가 떠있는 아이콘이 표시된다.","title":"🦢 logo-ls, bat"},{"content":"난 아직 맥북을 사지 못했다.\n사실 맥북을 사도 별로 달라질꺼같진않는데\n아무튼 터미널을 사용해야되기 때문에 wsl의 힘을 빌려서 windows에서의 생활을 이어나가는 중이다.\n그런데.. 그런데.. 막 gnome 41, fedora 35 beta 이런 뉴스가 들려올때면 리눅스 데스크톱 환경의 발전을 체험해 보고 싶어진다.\nwsl이 좋은 프로그램인건 문명하지만 내가 원하는 데스크톱 환경 체험은 완전히 다른 목적으로 개발된 프로그램이기에 걍 가상머신을 돌리는 편이 낫다.\n🔏 wsl와 VMware의 공존 내가 노트북에 VMware을 설치하길 꺼린 이유는 hyper-v 이슈 때문이다.\nwsl을 사용하게되면 hypervisor가 자동으로 활성화되어 하드웨어단의 가상화 자원에 hypervisor가 올라가고 그 위에서 wsl 배포판들이 돌아간다.\n원도우를 일회용으로 사용할수 있게 해주는 windows sandbox도 hypervisor 위에서 돌아가고 docker-desktop도 hypervisor 위에서 돌아간다.\n근데!! 기존 안드로이드 에뮬레이터(블루스택)이나 가상머신 프로그램(VMware, VirtualBox)는 하드웨어 단의 자원 바로 위에서 돌아가야 되는데 이미 해당 자원을 hypervisor가 차지하고 있어 실행시 hyper-v을 종료해 달라는 오류 뜨는 이슈가 있었다.\n🔓 문제의 해결 VMware의 엄청난 소식이 들려왔다.\nhyper-v가 활성화된 경우 자동으로 인식하고 WHP 위에서 돌아가도록 하는 모드가 추가되었다는 것이다.\n이제 wsl을 이용하고 있어도 VMware을 동시에 구동할 수 있다.\n그래서 VMware을 이용해 fedora을 구동했고, 만족했다. :)\n","permalink":"http://minpeter.github.io/posts/til/2021-10-18-wsl-docker-sandbox-and-vmware/","summary":"난 아직 맥북을 사지 못했다.\n사실 맥북을 사도 별로 달라질꺼같진않는데\n아무튼 터미널을 사용해야되기 때문에 wsl의 힘을 빌려서 windows에서의 생활을 이어나가는 중이다.\n그런데.. 그런데.. 막 gnome 41, fedora 35 beta 이런 뉴스가 들려올때면 리눅스 데스크톱 환경의 발전을 체험해 보고 싶어진다.\nwsl이 좋은 프로그램인건 문명하지만 내가 원하는 데스크톱 환경 체험은 완전히 다른 목적으로 개발된 프로그램이기에 걍 가상머신을 돌리는 편이 낫다.\n🔏 wsl와 VMware의 공존 내가 노트북에 VMware을 설치하길 꺼린 이유는 hyper-v 이슈 때문이다.","title":"🐌 wsl docker sandbox and VMware (TIL)"},{"content":"리눅스를 처음 접하면 기장 반가운건 다양한 것들중 단연 패키지관리자일 것이다.\n만약 windows에 winget 패키지 관리자가 나오기 전이나, 또는 아직까지도 winget에 대해 들어보자도 못한 개발자에게는 더욱 반가웠을 것이다.\nwindows의 새로운 패키지 관리자인 winget에 대해선 다음에 다뤄보도록 하겠다.\n우리가 보통 (그러니까 windows에서) 프로그램을 설치할때는 꽤 복잡하다.\n 해당 프로그램을 구글에 검색 프로그램의 exe 파일이나 msix 파일 다운 다운 받은 파일을 누르고 관리자권한 부여 다음 버튼 연타 끝  이렇듯 절대 쉬운 과정이 아니며 이런 과정 중간에 설치한 exe, msi, msix 파일이 남게 된다.\n프로그램을 지울때도 설정창에 들어가 다음 버튼 연타를 시전해야되고, 만약 windows 10에서 바뀐 설정 프로그램에 안뜨는 프로그램이면 레거시 제어판을 켜서 삭제해야된다. (똑같이 다음버튼 연타도..)\n하지만 리눅스를 사용하게되면, 설치하자마자 바로 apt나 yum, dnf 같은 패키지 관리자가 반겨준다.\nbut.. apt, yum같은 기본 패키지 관리자는 배포판별로 사용되는 deb, rpm같은 각 배포판 전용 파일을 사용하여, 은근 설치가 불가능한 프로그램들이 많다.\n예을 들면 ubuntu에서 사용하는 기본 패키지 관리자인 apt로는 discord을 바로 설치할 수 없으며 공식패이지에서도 deb나 rpm 패키지 파일을 받을 수 없다.\n이럴때 갑자기 리눅스를 사용하기로 결심한게 후회되고 막 손이 떨리면서 다시 원도우로 가고 싶고 winget이 그립고 macbook 병에 도져서 apple.com에 들어갈꺼같다면, 잠깐만 기다려라\n바로 리눅스유저에게 주어진 snap와 flatpak!!! snap은 아마도 ubuntu 유저라면 전부 들어봤을 snap-store의 백엔드이고 (그렇다고 하자) flatpak는 fedora 스토어의 일부로 등록되있다.\n이 둘에는 일반적인 패키지 관리자보다 훨씬 많은 패키지를 소유하고 있는데 이게 가능한 이유는 배포판과 별게로 완전히 다른 공간에서 실행되는 개념이기 때문이다.\n혹시 appimage를 사용해본적이 있거나 macOS을 사용해 보았다면 빨리 이해가 가능하다.\n둘다 인터넷에서 파일만 다운 받으면 별도의 설정없이 바로 실행할수 있는데, 해당 파일 안에 모든 정보가 기록되어 있기 때문이다.\n이와 마찬가지로 snap, flatpak 커맨드에서는 각각 범용 패키징 파일을 사용하여 리눅스 배포판에 상관없이 모든 배포판에 설치할수 있고 어음\u0026hellip; 그 골머리를 썩혔던 discord도 한줄이면 설치된다.\nsnap install discord\n난 이걸 몰라서 뻘짓을 많이 했다\nflatpak도 거희 동일하다.\nflatpak install 패키지명\n뭐 둘이 거희 동일하지만 보유하고 있는 패키지가 서로 다르기 때문에 둘 다 사용하는 편이 좋은거 같다.\n아직은 snap과 flatpak가 내부적으로 어떻게 패키징하면 모든 배포판에서 돌아가는 건지는 모르지만 나중에 gtk 프로그래밍을 입문하게 되면 snap과 flatpak 패키징을 각각 진행해 보고 싶다.\n시험 끝나면 해야지 :)\n","permalink":"http://minpeter.github.io/posts/linux/2021-10-09-apt-vs-dnf-snap-vs-flatpak/","summary":"리눅스를 처음 접하면 기장 반가운건 다양한 것들중 단연 패키지관리자일 것이다.\n만약 windows에 winget 패키지 관리자가 나오기 전이나, 또는 아직까지도 winget에 대해 들어보자도 못한 개발자에게는 더욱 반가웠을 것이다.\nwindows의 새로운 패키지 관리자인 winget에 대해선 다음에 다뤄보도록 하겠다.\n우리가 보통 (그러니까 windows에서) 프로그램을 설치할때는 꽤 복잡하다.\n 해당 프로그램을 구글에 검색 프로그램의 exe 파일이나 msix 파일 다운 다운 받은 파일을 누르고 관리자권한 부여 다음 버튼 연타 끝  이렇듯 절대 쉬운 과정이 아니며 이런 과정 중간에 설치한 exe, msi, msix 파일이 남게 된다.","title":"⛷️ apt vs dnf, snap vs flatpak"},{"content":"난 솔직히 자가진단이 싫다.\n최근 아이폰 7으로 바꾸기 전까지는 앱이 열리는데까지 너무 오래걸렸고,\n짜피 의식의 흐름대로 아니오를 3번 입력하는 동작은 정말 비효율적으로 느껴진다.\n하지만 교육청에선 필요하다고 생각하는 모양이다.\n뭐 과거의 나는 교육청에서 뭐라고 생각하든 신경쓰지않았고,\npython으로 자가진단 서버에 리퀘를 보내 자가진단을 자동으로 수행해주는 프로그램을 만들어서 사용했었다.\n선생님한테 적발되기 전까진,\n그 이후로 딱히 자가진단 자동화에 관심을 두지 않고 그냥 주어진대로 하면서 살아갔다.\n헌데 어느날 깃허브에서 다음 레포를 발견했다.\nhcs.js라는 노드 라이브러리 프로젝트인데 최근 추가된 보안키패드에 완벽대응한다!!\n내가 전에 작성했던 코드는 늅늅이때 작성한 코드라 개판이고, 지금도 늅이다..\n특히 이번에 보안키패드를 적용하여 그냥 작동불능이 되었다.\n난 hcs.js 프로젝트를 보고 다시 내가 만든 프로그램을 개량하고 싶었다.\n그냥 그저 시스탬을 분석해 자동으로 동작하는 모습을 보고 싶었다.\n먼저 hcs.js 라이브러리를 사용해보기로 결심했고, node을 다운받을 방법을 찾았다.\nnodeJS를 설치하는 올바른 방법 nodeJS를 설치하는데 많은 방법이 있는거 같았다.\n\u0026lsquo;nodejs install\u0026rsquo;이라고 검색했을때 블로그마다 다른 검색결과가 뜨는걸 보면 알수 있었다.\n내가 찾은 방법은 2가지였다.\n nvm 같은 노드버전관리자를 이용해 설치하는 방법 winget, apt같은 패키지관리자를 이용해 특정 버전의 node을 설치하는 방법,  솔직히 2번 방법을 사용해도 문제가 없겠지만 노드버전관리자가 존재하는 이유가 있다.\nnodejs의 신버전 출시가 매우 빈번하게 일어난다는것이다.\n패키지관리자로 node을 설치하면 매번 신버전의 노드가 설치되어 기존 의존성이 깨질수도 있고, 의존성이외에 문제가 생길수도 있다. 이런걸 해결하기위해 다양한 버전에 노드를 동시에 사용할수 있는 nvm을 사용하는 것이다.\nnvm을 이용해 node을 설치하는 방법 curl 도구를 설치하자.\nsudo apt-get install curl\n아래 명령어로 nvm을 설치하자\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n혹시 zsh이나 기타 다른 쉘을 이용하고 있다면 pipe(|) 뒤를 bash이 아닌 zsh 또는 다른 것으로 변경해주자\n++ 글을 쓰는 시점에선 0.39.0이 최신 버전이지만 나중에 업데이트가 될수도 있다.\n업데이트 여부를 확인하려면 이 페이지에서 확인해보자\n이제 nvm가 설치되었다.\ncommand -v nvm 명령을 사용해 설치여부를 알 수 있는데 \u0026lsquo;명령어를 찾을수 없음\u0026rsquo;과 같은 메세지가 출력되면 터미널을 닫았다가 다시 켜보자\nnvm install node 명령어를 이용해 최신버전의 node나 nvm install --lts 명령어로 안정적인 릴리즈를 설치할수도 있다. node --version 명령어를 실행하면 설치된 node의 버전이 출력된다.\nnodejs가 잘 설치되었으니 프로그래밍을 즐기고, nvm tool에 대해 조금 더 공부해보자\n","permalink":"http://minpeter.github.io/posts/til/2021-10-01-nvm%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-node%EB%B2%84%EC%A0%84%EA%B4%80%EB%A6%AC/","summary":"난 솔직히 자가진단이 싫다.\n최근 아이폰 7으로 바꾸기 전까지는 앱이 열리는데까지 너무 오래걸렸고,\n짜피 의식의 흐름대로 아니오를 3번 입력하는 동작은 정말 비효율적으로 느껴진다.\n하지만 교육청에선 필요하다고 생각하는 모양이다.\n뭐 과거의 나는 교육청에서 뭐라고 생각하든 신경쓰지않았고,\npython으로 자가진단 서버에 리퀘를 보내 자가진단을 자동으로 수행해주는 프로그램을 만들어서 사용했었다.\n선생님한테 적발되기 전까진,\n그 이후로 딱히 자가진단 자동화에 관심을 두지 않고 그냥 주어진대로 하면서 살아갔다.\n헌데 어느날 깃허브에서 다음 레포를 발견했다.\nhcs.js라는 노드 라이브러리 프로젝트인데 최근 추가된 보안키패드에 완벽대응한다!","title":"🦎 nvm을 이용한 node버전관리 (TIL)"},{"content":"기본적으로 stack에서 실행되는 서비스를 외부에 접속하기위해선 manager 노드와 연결되어야한다.\n하지만 전 포스트에서 만든 echo stack은 constraints: [node.role != manager]옵션으로 매니저에서는 실행되지 않도록 설정했기 때문에 각각 컨테이너가 여러 노드에 분산되어있기때문에 전에 visualizer 서비스를 만들때와 같은 방식 또한 사용할수 없다.\n따라서 클러스터 외부의 트래픽을 내부로 보내주는 프록시 서버를 구성해보겠다.\nhaproxy 이미지를 사용하여 외부트래픽이 nginx 컨테이너로 가도록 설정해보자.\ningress.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version: \u0026#34;3\u0026#34; services: haproxy: image: dockercloud/haproxy networks: - test volumes: - /var/run/docker.sock:/var/run/docker.sock deploy: mode: global placement: constraints: [node.role == manager] ports: - 80:80 - 1936:1936 # for stats page (basic auth. stats:stats) networks: test: external: true   해당 프록시는 8080포트위 페이지를 외부 80포트로 연결해주는 간단한 프록시이다.\n파일 manager컨테이너로 이동\n1  $ docker cp ingress.yaml manager:/ingress.yaml   서비스배포\n1 2  $ docker exec -it manager \\ docker stack deploy -c /ingress.yaml ingress   아래 명령어로 서비스가 실행되고 있는 것을 확인할수 있다.(또는 visualizer를 이용해 확인해도된다.)\n1 2  $ docker exec -it manager \\ docker service ls   마지막으로 로컬에서 브라우저로 localhost:8000에 접속하면 hello, flask!라는 메세지가 출력되는것을 알수 있다.\n이때 프록시서버에서 80 포트로 포워딩했는데 8000 포트에 접속하는 이유는 우리가 클러스터 컨테이너를 만들당시 manager노드의 포트를 8000:80으로 주었기때문이다.\n참고자료 스웜(swarm)을 이용한 도커 컨테이너 배포_3 (스웜 클러스터 외부에서 서비스 사용하기)\ndocker docs\n","permalink":"http://minpeter.github.io/posts/server/2021-09-14-stack-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/","summary":"기본적으로 stack에서 실행되는 서비스를 외부에 접속하기위해선 manager 노드와 연결되어야한다.\n하지만 전 포스트에서 만든 echo stack은 constraints: [node.role != manager]옵션으로 매니저에서는 실행되지 않도록 설정했기 때문에 각각 컨테이너가 여러 노드에 분산되어있기때문에 전에 visualizer 서비스를 만들때와 같은 방식 또한 사용할수 없다.\n따라서 클러스터 외부의 트래픽을 내부로 보내주는 프록시 서버를 구성해보겠다.\nhaproxy 이미지를 사용하여 외부트래픽이 nginx 컨테이너로 가도록 설정해보자.\ningress.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version: \u0026#34;3\u0026#34; services: haproxy: image: dockercloud/haproxy networks: - test volumes: - /var/run/docker.","title":"🕸️ stack 서비스를 외부에서 사용하기"},{"content":"개요 visualizer는 2016 dockercon에서 stack기능 소개를 위해 만들어진 툴이다.\n이를 이용하면 swarm모드에서 노드와 컨테이너의 분포상태를 시각적으로 볼수 있다.\n실습 visualizer.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13  version: \u0026#34;3\u0026#34; services: app: image: dockersamples/visualizer ports: - \u0026#34;9000:8080\u0026#34; volumes: - /var/run/docker.sock:/var/run/docker.sock deploy: mode: global placement: constraints: [node.role == manager]   컨테이너를 이용해 실습하고 있다면 docker cp명령어로 파일을 옮겨주자\n1  $ docker cp visualizer.yaml manager:/visualizer.yaml   서비스를 실행해주자\n1 2  $ docker exec -it manager \\ docker stack deploy -c /visualizer.yaml visualizer   localhost:9000에 접속해보면 아름다운 창이 뜰것이다.\n참고자료 스웜(swarm)을 이용한 도커 컨테이너 배포_2\n","permalink":"http://minpeter.github.io/posts/server/2021-09-13-docker-stack-visualizer/","summary":"개요 visualizer는 2016 dockercon에서 stack기능 소개를 위해 만들어진 툴이다.\n이를 이용하면 swarm모드에서 노드와 컨테이너의 분포상태를 시각적으로 볼수 있다.\n실습 visualizer.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13  version: \u0026#34;3\u0026#34; services: app: image: dockersamples/visualizer ports: - \u0026#34;9000:8080\u0026#34; volumes: - /var/run/docker.sock:/var/run/docker.sock deploy: mode: global placement: constraints: [node.role == manager]   컨테이너를 이용해 실습하고 있다면 docker cp명령어로 파일을 옮겨주자\n1  $ docker cp visualizer.yaml manager:/visualizer.","title":"🦕 docker stack visualizer"},{"content":"swarm에서 compose 전에서 run명령어와 비슷한 service 명령어를 이용해 swarm에 컨테이너를 띄우고 스케일을 조정해보았다.\n이번엔 compose명령어와 비슷한 stack에 대해 알아보자.\n스택이란 하나 이상의 서비스를 그룹으로 묶은 단위로, 애플리케이션 저체 구성을 정의한다.\n그냥 간단하게 swarm에서 작동하는 (스케일기능이 포함된) compose라고 생각하자\n또 특징으로는 compose와 동일하게 같은 네트워크에 포함되게된다.\n일단 네트워크을 하나 생성해주자\n1 2  $ docker exec -it manager \\ docker network create --driver=overlay --attachable test   test라는 이름의 네트워크를 생성해주었다.\n이제 stack-compose 파일을 생성해주자\ndocker-stack.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  version: \u0026#39;3\u0026#39; services: flask-echo: image: minpeter/flask-echo deploy: replicas: 3 placement: constraints: [node.role != manager] ports: - \u0026#34;5000:5000\u0026#34; networks: - test nginx-echo: image: minpeter/nginx-echo deploy: replicas: 3 placement: constraints: [node.role != manager] depends_on: - flask-echo ports: - \u0026#34;8080:80\u0026#34; networks: - test networks: test: external: true   이제 파일을 manager 컨테이너로 보내야되는데 docker cp 명령어를 사용하자\n1  $ docker cp docker-stack.yaml manager:/docker-stack.yaml   이제 stack을 배포할 차례이다.\n1 2  $ docker exec -it manager \\ docker stack deploy -c /docker-stack.yaml echo   이제 hello, flask!를 출력하는 간단한 페이지가 8080포트에 올라갔다.\n배포된 서비스를 확인해보자\n1 2  $ docker exec -it manager \\ docker stack services echo   스택이 컨테이너를 배포한 방식을 확인하려면 다음 명령어를 사용하자.\n1 2  $ docker exec -it manager \\ docker stack ps echo   참고자료 스웜(swarm)을 이용한 도커 컨테이너 배포_2\n","permalink":"http://minpeter.github.io/posts/server/2021-09-12-swarm%EC%9D%98-compose-stack/","summary":"swarm에서 compose 전에서 run명령어와 비슷한 service 명령어를 이용해 swarm에 컨테이너를 띄우고 스케일을 조정해보았다.\n이번엔 compose명령어와 비슷한 stack에 대해 알아보자.\n스택이란 하나 이상의 서비스를 그룹으로 묶은 단위로, 애플리케이션 저체 구성을 정의한다.\n그냥 간단하게 swarm에서 작동하는 (스케일기능이 포함된) compose라고 생각하자\n또 특징으로는 compose와 동일하게 같은 네트워크에 포함되게된다.\n일단 네트워크을 하나 생성해주자\n1 2  $ docker exec -it manager \\ docker network create --driver=overlay --attachable test   test라는 이름의 네트워크를 생성해주었다.","title":"🐙 Swarm의 compose stack"},{"content":"사건의 발단 별것도 아닌걸로 2일을 날렸다.\nwindows 11 DEV 채널이 BETA 채널과 완전히 분리되어 다른 빌드번호를 가지게 되었다.\n뭔 뜻이냐면 이제 더 이상 DEV에서 BETA로 넘어갈 수 없다는 뜻이고, 더이상 DEV에서는 실사용으로 사용하기 어려울꺼라는 뜻이다.\n또 마침 22454 빌드로 넘어가고 전 빌드에 존재했던 sandbox 작동 불능은 고쳐지지도 않고 taskbar에 아이콘이 왼쪽으로 치우쳐지는 이상한 버그가 생겼다.\n솔직히 이렇게 버그가 많은데 DEV 채널 플라이트를 계속할 이유도 없었고,\n따라서 BETA채널로 내려가기를 결정했다.\nonedrive와 pihole을 궁합 BETA채널로 내려가기 위해선 전부 재설치를 해야했다.\n최근 winget 패키지관리자로 프로그램 설치도 간단해졌고 원도우 설치도 얼마 안걸리는 마당에 그냥 밀기로했다.\n설치 usb만들고 BETA설치를 한뒤 onedrive 로컬폴더 백업을 할때 문제가 생겼다.\n옵션이 없는 것이다.\n혹시 윈도우설치가 잘못됬나싶어서 재설치도 해보고, 다시 DEV로 올라가서 설정도 해봤다.\n전부 실패였다.\n뭐가 문제였을까?\n생각보다 간단했다.\nabout onedrive 에 들어가보면 아래와 같이 나와있다.\n1 2 3 4 5 6 7 8 9  참고 사항: 표의 빈칸은 현재 해당 링에 배포 중인 빌드가 없음을 의미합니다. OneDrive 동기화 앱 업데이트를 적용하려면 컴퓨터가 다음에 연결될 수 있어야 합니다: \u0026#34;oneclient.sfx.ms\u0026#34; 및 \u0026#34;g.live.com.\u0026#34; 이들 도메인을 차단하고 있지 않은지 확인합니다. 이들은 또한 기능을 활성화/비활성홯하고 버그 수정을 적용하는데 사용됩니다. Microsoft 365에서 사용되는 URL 및 IP 주소에 대한 자세한 정보 OneDrive 동기화 앱 업데이트 프로세스에 대해 자세히 알아보십시오. 지연된 링 릴리스를 완료한 후 빌드가 프로덕션 링에 릴리스되기를 기다린 후 지연된 링의 다음 릴리스로 선택합니다. 이 경우 정확한 빌드 번호와 대상 날짜를 게시하기 전에 지연된 열을 \u0026#34;다음 릴리스: 19.222.x\u0026#34;을 업데이트하여 고객의 계획에 도움을 제공합니다.   2번째 줄을 유심히 보자\n\u0026ldquo;oneclient.sfx.ms\u0026quot;와 \u0026ldquo;g.live.com\u0026quot;에 연결할 수 있어야한다.\n근데 ping test를 해보니 \u0026ldquo;g.live.com\u0026quot;에 접속이 되지 않았다.\n정확히는 아예 ip주소를 못찾았으니 pihole이 막고 있는 것이다.\nDNS서버를 기본상태로 돌리고 다시 백업 설정을 해보니 거짓말같이 잘 작동하였다.\n아놔 ㅅㅂ\u0026hellip;.\n솔직히 마소 잘못은 아니다 ㅋㅋ g.live.com 이 광고이미지서버, msc뉴스서버, 원드라이브의 일부 기능까지 너무 광범위하게 사용될뿐이지\u0026hellip;\npihole에 화이트리스트를 주고 windows 11 beta 체널로 이주를 완료했다.\n글에 언급된거 말고도 별 뻘짓을 다해서 2일이나 날려먹었다.\n내소중한주말..\n","permalink":"http://minpeter.github.io/posts/til/2021-09-12-onedrive%EC%99%80-pihole/","summary":"사건의 발단 별것도 아닌걸로 2일을 날렸다.\nwindows 11 DEV 채널이 BETA 채널과 완전히 분리되어 다른 빌드번호를 가지게 되었다.\n뭔 뜻이냐면 이제 더 이상 DEV에서 BETA로 넘어갈 수 없다는 뜻이고, 더이상 DEV에서는 실사용으로 사용하기 어려울꺼라는 뜻이다.\n또 마침 22454 빌드로 넘어가고 전 빌드에 존재했던 sandbox 작동 불능은 고쳐지지도 않고 taskbar에 아이콘이 왼쪽으로 치우쳐지는 이상한 버그가 생겼다.\n솔직히 이렇게 버그가 많은데 DEV 채널 플라이트를 계속할 이유도 없었고,\n따라서 BETA채널로 내려가기를 결정했다.\nonedrive와 pihole을 궁합 BETA채널로 내려가기 위해선 전부 재설치를 해야했다.","title":"☁️ onedrive와 pihole (TIL)"},{"content":"소개 해당 포스트는 도커안에 도커 (dind)기능을 이용해 로컬에서 클러스터와 유사한 환경을 구성하고,\ndocker swarm을 이용해 클러스터를 제어하는 Orchestration을 실습하는 방법에 대한 포스팅이다.\ndocker swarm, Orchestration이란? docker swarm은 kubernetes와 같은 Orchestration tool이다.\n예를 들어 5대의 서버가 있다고 생각해보자\nOrchestration tool을 사용하지 않을 경우는 각각 서버에 동일한 기능을 하도록 설정하거나, 각자 특정기능을 담당하는 식으로 설정해야될 것이다.\n하지만 이 경우 특정 기능이나 서비스에 많은 요청이 들어올경우, 직접 수동으로 해당 서비스를 더 많이 만들어주어야 한다.\n하지만 Orchestration tool을 이용하면 설정값에 따라 특정 서비스를 생성하고 유지하기 때문에 부하가 많이 걸릴시 설정만 바꿔주면 되고 해당 작업 또한 자동화 할 수 있게된다.\n또 서비스를 업데이트 할때 서비스를 종료하지않고 배포하는 것이 가능하다.\n(특정 서버에 서비스를 몰아서 배치하는 것이 아닌 분산하여 배치하기 때문에 순차적으로 배포를 진행하면 중단하지 않고도 가능하다.)\n배포를 하였을때 해당 배포에 문제가 생긴 경우 배포를 중단하고 원래 배포전 상태로 돌려주고, 서비스에 문제가 생겨 종료된 경우 자동으로 재시작도 진행해준다.\n이처럼 서비스가 배포중에도 중단되지않고 꺼지지 않아야 하는 경우 사용하면 좋은 도구이다.\ndocker swarm에서 사용하는 용어 설명    이름 역활     compose 여러 컨테이너로 구성된 도커 애플리케션을 관리함   swarm 클러스터 구축 및 관리   service 기본적인 배포단위, swarm에서 클러스터 안의 서비스을 관리, 기본 docker에서 run과 비슷하다   stack swarm에서 여러 개의 서비스를 합함 전체 애플리케이션을 관리   node swarm 클러스터에 속한 도커 서버의 단위   manager node 스윔 클러스터의 상태를 관리하는 노드, 동시에 worker node가 될 수 있고, 여기에서만 swarm명령어를 실행할수 있다.   worker node manager node의 명령을 받아 컨테이너를 생성, 상태를 체크하는 노드   task 컨테이너 배포 단위, 서비스는 여러개의 task을 실행, task는 컨테이너를 관리한다    docker swarm 실습 docker swarm은 기본적으로 여러개의 서버를 관리하는 툴이다.\n하지만 우리가 실습할때는 대부분 노트북 하나만을 가지고 실습을 할 것이다.\n따라서 실제 환경과는 조금 다른 가상 실습환경을 만들것이다.\n다양한 방법이 있지만 dind (docker in docker)기능을 활용해서 도커 컨테이너를 각각 노드로 사용하여 실습하도록하겠다.\n(다른 방법으로는 vagrant을 이용해 가상머신을 생성해주거나 클라우드서비스를 이용해 실제 클러스터를 구현할수도)\ndocker compose을 이용해서 1개의 manager node(dind)와 3개의 worker node(dind)을 생성해줄것이다.\n참고한 기존 블로그 글에서는 registy컨테어너가 별도로 존재했지만 실습결과 딱히 필요성을 느끼지 못해 삭제하였다.\n(docker registy는 docker hub를 대체하는 로컬서버정도로 이해하면 될 것 같다.)\n가상클러스터 생성 docker-swarm 디렉토리를 생성하고 그 안에 아래의 코드를 참조해 파일을 만들어주자.\ndocker-compose.yaml\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  version: \u0026#34;3\u0026#34; services: manager: container_name: manager image: docker:dind privileged: true tty: true ports: - 8000:80 - 9000:9000 depends_on: - registry expose: - 3375 volumes: - \u0026#34;./stack:/stack\u0026#34; worker01: container_name: worker01 image: docker:dind privileged: true tty: true depends_on: - manager - registry expose: - 7946 - 7946/udp - 4789/udp worker02: container_name: worker02 image: docker:dind privileged: true tty: true depends_on: - manager - registry expose: - 7946 - 7946/udp - 4789/udp worker03: container_name: worker03 image: docker:dind privileged: true tty: true depends_on: - manager - registry expose: - 7946 - 7946/udp - 4789/udp   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63  version: \u0026#34;3\u0026#34; services: registry: container_name: registry image: registry:latest ports: - 5000:5000 volumes: - \u0026#34;./registry-data:/var/lib/registry\u0026#34; manager: container_name: manager image: docker:dind privileged: true tty: true ports: - 8000:80 - 9000:9000 depends_on: - registry expose: - 3375 command: \u0026#34;--insecure-registry registry:5000\u0026#34; volumes: - \u0026#34;./stack:/stack\u0026#34; worker01: container_name: worker01 image: docker:dind privileged: true tty: true depends_on: - manager - registry expose: - 7946 - 7946/udp - 4789/udp command: \u0026#34;--insecure-registry registry:5000\u0026#34; worker02: container_name: worker02 image: docker:dind privileged: true tty: true depends_on: - manager - registry expose: - 7946 - 7946/udp - 4789/udp command: \u0026#34;--insecure-registry registry:5000\u0026#34; worker03: container_name: worker03 image: docker:dind privileged: true tty: true depends_on: - manager - registry expose: - 7946 - 7946/udp - 4789/udp command: \u0026#34;--insecure-registry registry:5000\u0026#34;   다음 아래의 명령어를 입력해주자\n1 2  $ docker compose up -d $ docker ps   이제 클러스터의 역활을 할 컨테이너가 4개 또는 5개가 생성된 것을 확인 할 수 있을 것이다.\nmanager 등록 원래 docker swarm init 명령어를 이용해 등록하면 되지만 현제 컨테이너 안에 가상클러스터를 실행했기 때문에 명령어 앞에 다음 명령어를 추가로 입력해주어야한다.\n1 2  $ docker exec -it (실행할 타겟, manager or worker) \\ (실행할 명령어)   따라서 메니저에서 docker swarm init 명령어를 실행하기 위해서는 다음 명령어를 실행하면 된다.\n1 2  $ docker exec -it manager \\ docker swarm init   명령어를 입력하면 아래에\n1  $ docker swarm join --token (토큰값) (메니저IP):(port)   형태로 출력될텐데 다음 명령어를 복사해주자.\nworker 등록 위에서 복사한 명령어를 worker에서 실행하면 우리가 만든 swarm 클러스터에 등록할 수 있다.\n다음과 같은 방식으로 worker01 ~ worker 03까지 등록을 진행해주자.\n1 2  $ docker exec -it worker01 \\ docker swarm join --token (토큰값) (메니저IP):(port)   1 2  $ docker exec -it worker02 \\ docker swarm join --token (토큰값) (메니저IP):(port)   1 2  $ docker exec -it worker03 \\ docker swarm join --token (토큰값) (메니저IP):(port)   이제 아래 명령어로 노드가 잘 등록됬는지 확인해보자\n1 2  $ docker exec -it manager \\ docker node ls   만약 worker node을 포함해 4개의 node가 나온다면 클러스터를 만드는데 성공한 것이다.\n이미지 태그 생성 1  $ docker tag (원본이미지) localhost:5000/(원본이미지)   registry 컨테이너에 이미지 등록 1  $ docker push localhost:5000/(원본이미지)   worker 컨테이너에서 이미지 다운 1 2  $ docker exec -it worker01 \\ docker pull registry:5000/(원본이미지)   이미지확인 1 2  $ docker exec -it worker01 \\ docker images   서비스 생성 swarm에서 단일 컨테이너를 배포하기 위해선 service라는 단위를 사용하는데 다음 명령어로 실행할수 있다.\n1  docker service create --name [서비스이름] -p [외부포트]:[내부포트] [도커이미지]:[태그]   이를 테스트 해보기 위해 hashcorp/http-echo이미지를 사용해보자\n1 2  docker exec -it manager \\ docker service create --name test_swarm -p 5678:5678 hashcorp/http-echo:latest   다음 명령어로 서비스가 생성된걸 확인할수 있다.\n1 2  docker exec -it manager \\ docker service ls   생성된것이 확인되었으면 다음 명령어로 스케일을 조정해보자\n1 2  docker exec -it manager \\ docker service scale test_swarm=6   잠깐기달리면 swarm이 알아서 컨테이너를 생성해 각 노드에 분활배치한다.\n그리고 service ls 명령어로 다시 확인해보면 REPLICAS가 1개에서 9개로 늘어난것을 확인할수 있다.\n생성한 서비스를 삭제하기 위해선 다음 명령어를 입력하자\n1 2  docker exec -it manager \\ docker serivce rm test_swarm   참고자료 스웜(swarm)을 이용한 도커 컨테이너 배포_1\nDocker Swarm을 이용한 쉽고 빠른 분산 서버 관리\ndocker docs\n","permalink":"http://minpeter.github.io/posts/server/2021-09-09-docker-swarm-orchestration/","summary":"소개 해당 포스트는 도커안에 도커 (dind)기능을 이용해 로컬에서 클러스터와 유사한 환경을 구성하고,\ndocker swarm을 이용해 클러스터를 제어하는 Orchestration을 실습하는 방법에 대한 포스팅이다.\ndocker swarm, Orchestration이란? docker swarm은 kubernetes와 같은 Orchestration tool이다.\n예를 들어 5대의 서버가 있다고 생각해보자\nOrchestration tool을 사용하지 않을 경우는 각각 서버에 동일한 기능을 하도록 설정하거나, 각자 특정기능을 담당하는 식으로 설정해야될 것이다.\n하지만 이 경우 특정 기능이나 서비스에 많은 요청이 들어올경우, 직접 수동으로 해당 서비스를 더 많이 만들어주어야 한다.","title":"🐋 Docker swarm Orchestration"},{"content":"잡설 시작하기 앞써 잡설을 풀자면, 점점 마크다운 실력이 늘고 있다.\n역시 마크다운으로 작성하는 블로그의 힘!\n이 글을 보는 당신도 github pages 블로그 개설을 추천한다.\n해결해야될 문제 우리는 많은 이유로 그리고 핑게로 윈도우를 사용한다.\n인터넷뱅킹, 윈도우 전용 프로그램, wsl의 편리함, winget으로 인한 편의성, 게임\n하지만 윈도우를 사용하는 모든 사용자는 한번 만나게 되는 존재가 있으니,\n이름하여 MS EDGE 되시겠다.\n우리 엣지브라우저로 말할꺼 같으면 윈도우 기본 브라우저인데다가 속도도 빠르고 이번 업데이트로 비활성탭기능이 추가되어 메모리를 많이 절약할수 있고 크로미움 기반으로 만들어져서 크롬 확장프로그램을 거희 그대로 사용가능하다는 장점.. etc가 있는 브라우전데\n난 필요없다.\n따라서 우리는 edge를 지우고 싶어한다. (그래야만해) 하지만 윈도우 검색기능, 코나타, 나도 모르는 다양한 윈도우 기능과 edge가 연동되어 있으며, 삭제가 거희 불가능하다.\n(레지스터에서 지우는 글을 봤었다 따라하진 말자)\n사실 설치돼 있어도 그냥 크롬 설치해서 기본브라우저 설정하고 쓰면 문제 없다.\n하지만 설정이 안봐뀌는게 있으니, 윈도우의 검색기능이다.\n윈도우 검색은 기본이 엣지며 설정창에선 변경이 불가능하다.\n이는 명백히 독재이다.\n사실 마소가 순순히 업데이트로 독재를 그만두면 가장 좋은데 그럴리가 없다.\n이번 글에서는 윈도우의 검색기능을 크롬으로 변경하는 방법에 대해 소개한다.\n엣지에 독재에서 벗어나는 방법 방법은 생각보다 쉽다.\nEdgeDeflector란 프로그램을 이용하여 윈도우를 속여 Edge 대신 기본브라우저로 검색 url을 넘겨준다.\n그 다음에 크롬확장프로그램은 redirect bing 플러그인으로 bing url을 다른 검색엔진 url로 변경해준다.\n그럼 검색결과 페이지가 기본브라우저로 켜지는 방식이다.\n 먼저 엣지가 아닌 다른 브라우저를 윈도우 기본브라우저로 설정해준다.\n굳이 크롬일 필요도 없으며 그냥 오패라, 웨일 아무거나 설정해주면된다.\n기본브라우저로 설정하는 방법은 윈도우 11 기준 윈도우 10보다 조금 복잡해졌다.\n아래 링크를 보고 기본브라우저로 설정해주자.\nhow set default web browser windows 11 다음으론 Edge Deflector를 설치해야한다.\n오픈소스프로그램으로 깃허브에 올라와있다.\n아래 페이지에서 최신버전의 EdgeDeflector_install.exe 파일을 다운받아주자.\ngithub.com/da2x/EdgeDeflector/releases\n설치하면 설정을 어떻게 하는지 설명해주는 페이지가 뜰꺼다.\n차근차근 따라하면 얼마안걸린다.\n(더 편한방법으론 그냥 검색한번해서 edgedeflector 항상사용 -\u0026gt; 확인) 크롬 확장프로그램을 설치하자.\n사실 설치를 안해도 크롬으로 검색이 된다.\n하지만 검색결과가 bing\u0026hellip; 이걸 자동으로 구글이나 다른 검색엔진으로 바꾸기 위해 설치한다.\n설치는 아래 링크를 사용하자.\nChrometana Pro\n또는 chrome 웹 스토어에서 redirect bing을 검색해 원하는걸 다운받자.\n무슨이유에서인지 스토어지역을 미국으로 설정해야지만 검색결과가 나온다.\n구글에서 대한민국을 막은거같다.  결과 이제 검색을 해보자!\nchrome으로 또는 다른 기본브라우저로 열리는걸 볼 수 있다.\n이젠 edge 독재에서 조금은 더 벗어났다.\n좋은 프로그램을 만들어주신 Daniel Aleksandersen와 기여자들께 감사드리며 조금은 더 편하게 윈도우를 사용해야겠다.\n참고자료 EdgeDeflector\nChrometana Pro\n컴터맨의 컴퓨터 이야기 - 윈도우10 검색 상자 Bing 검색을 Google로 바꾸는 방법. 코타나의 Bing 검색 변경\n","permalink":"http://minpeter.github.io/posts/til/2021-09-05-edge%EC%9D%98-%EB%8F%85%EC%9E%AC%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0/","summary":"잡설 시작하기 앞써 잡설을 풀자면, 점점 마크다운 실력이 늘고 있다.\n역시 마크다운으로 작성하는 블로그의 힘!\n이 글을 보는 당신도 github pages 블로그 개설을 추천한다.\n해결해야될 문제 우리는 많은 이유로 그리고 핑게로 윈도우를 사용한다.\n인터넷뱅킹, 윈도우 전용 프로그램, wsl의 편리함, winget으로 인한 편의성, 게임\n하지만 윈도우를 사용하는 모든 사용자는 한번 만나게 되는 존재가 있으니,\n이름하여 MS EDGE 되시겠다.\n우리 엣지브라우저로 말할꺼 같으면 윈도우 기본 브라우저인데다가 속도도 빠르고 이번 업데이트로 비활성탭기능이 추가되어 메모리를 많이 절약할수 있고 크로미움 기반으로 만들어져서 크롬 확장프로그램을 거희 그대로 사용가능하다는 장점.","title":"🎉 edge의 독재에서 벗어나기 (TIL)"},{"content":"pi hole이란? 라즈베리파이와 리눅스계열 운영체제에 설치되는 DNS서버이다.\n하지만 광고 제거을 곁들인\n일반적으로 사용하는 크롬 플러그인과 다르게 네트워크단에서 광고를 차단하기 때문에 성능저하가 덜하다.\n또한 플러그인에 비해 비교 불가능한 장점이 있는데, 공유기에 DNS서버를 pihole로 설정하면 해당 네트워크 전체에 적용된다.\n그러니까 스마트폰에서도 된단 소리다\n이러한 장점이 있으나 무조건 해야겠지?\n설치과정 설치하는 방법은 크게 2가지로 나뉜다.\n  설치스크립트를 이용하는 방법\ncurl -sSL https://install.pi-hole.net | bash\n입력한 뒤에 선택창같은게 뜰꺼다.\n눈칫것 설정해주자.\n곧 pi hole이 실행될 것이다.\n라즈베리파이제로같은저성능 머신에선 이 방법을 쓰겠지만 난 3b+ 에서 설정할 것이기에 후자를 선호한다.\n  도커를 이용해 컨테이너로 띄우는 방법\n이 방법을 추천한다.\n3b+같은 모델의 경우 파이홀을 구동하고도 램 같은 리소스가 한참 남는다.\n1번 방법을 사용해도 남은 리소스를 사용할 수 있지만 도커 컨테이너를 사용하면 뭔가 깔끔하게 관리가 가능하기 때문에 사용한다.\n일단 docker와 docker-compose을 설치한 뒤,\npihole 디렉토리를 하나 만들어준다.\n해당 디렉토리에서 docker-compose 파일에 아래와 같이 작성한다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  version: \u0026#34;3\u0026#34;# More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/services:pihole: container_name: pihole image: pihole/pihole:latest ports: - \u0026#34;53:53/tcp\u0026#34; - \u0026#34;53:53/udp\u0026#34; - \u0026#34;67:67/udp\u0026#34; - \u0026#34;80:80/tcp\u0026#34; - \u0026#34;443:443/tcp\u0026#34; environment: TZ: \u0026#39;Asia/Seoul\u0026#39; WEBPASSWORD: \u0026#39;\u0026lt;MY_PASSWORD\u0026gt;\u0026#39; # Volumes store your data between container upgrades volumes: - \u0026#39;./etc-pihole/:/etc/pihole/\u0026#39; - \u0026#39;./etc-dnsmasq.d/:/etc/dnsmasq.d/\u0026#39; dns: - 127.0.0.1 - 1.1.1.1 - 1.0.0.1 # Recommended but not required (DHCP needs NET_ADMIN) # https://github.com/pi-hole/docker-pi-hole#note-on-capabilities cap_add:  위에 파일에서 수정해야될것은 딱 한가지인데 WEBPASSWORD의 \u0026lt;MY_PASSWORD\u0026gt;을 대신해서 비밀번호를 입력해주면된다.\n(이때입력한 비밀번호는 관리자페이지 로그인에 사용)\ndocker-compose up -d\n을 실행해주면 조금 뒤에 pi hole이 실행된다.\n  pi hole 설정 이제 pi hole 설치는 끝났다. 🎉 광고 제거를 위해서는 몇가지 설정이 필요한데, 먼저 관리자페이지로 가보자\n관리자 페이지는 해당라파ip/admin으로 접속하면 열린다.\n잘 열린다면 pi hole 설치가 정상적으로 된 것이다.\n뒤에 설명은 공유기를 사용하고 있다는 가정하에 설명하겠다\n열리는 것을 확인한 후 공유기 설정페이지로 가준다.\n설정페이지에는 보통 인터넷설정하는 페이지가 있을텐데 여기서 DNS 항목을 수정해야된다.\n기본 DNS 주소와 보조 DNS 주소를 입력하는 공간이 있을텐데 여기서 기본 DNS 주소에 라즈베리파이 IP를 입력해준다.\n제발 보조 DNS에 아무것도 입력하지 말자\n필자는 인터넷에 올라온 설명 따라하다가 \u0026ldquo;이거 왜 안돼.. 이러면서 한참 삽질했다..\n보조 DNS를 1.1.1.1, 8.8.8.8 같은 DNS 주소로 입력할 경우 우리가 열심히 구축해둔 PI hole의 광고 제거 기능으로 광고 이미지 아이피를 차단하면 공유기가 자동으로 보조 DNS에서 도메인을 검색해버린다..\n따라서 절대로 보조 DNS는 비워두자\npi hole 작동 테스트 여기까지 문제 없이 따라왔다면 이제 광고차단이 이루워지고 있을 것이다.\n근데 전부 차단되는건 아니고 PI hole 광고 차단리스트에 등록된 광고만 삭제되는데\n이는 추가로 등록할수 있으니 넘어가고\n광고가 잘 차단되는지 바로 알 수가 없다.\n따라서 테스트 하는 방법을 소개한다.\n바로 speedtest.net!!\n이건 인터넷속도측정사이튼데 PI hole이 작용 안되면 광고가 엄~청 많다.\n하지만 PI hole이 잘 작동된다면 해당 사이트에 광고가 하나도 안보여야한다.\n만약 광고가 보인다면 아래 2가지를 따라해보자.\n 제발 보조 DNS 확인좀;; 컴퓨터 재부팅후 재시도 (PIhole돌아가고 있는 라즈베리파이말고)  여기까지가 내가 PI hole 설정하면서 알게된 내용이다.\n내일은 openVPN을 연동하여 집이 아닌 외부에서도 광고차단 효과를 누릴수 있게 설정해보도록 하겠다.\n참고자료 pi hole home page\npi hole로 광고 뿌리뽑기\npihole_test_site\n","permalink":"http://minpeter.github.io/posts/server/2021-09-02-pi-hole%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EA%B4%91%EA%B3%A0-%EC%A0%9C%EA%B1%B0/","summary":"pi hole이란? 라즈베리파이와 리눅스계열 운영체제에 설치되는 DNS서버이다.\n하지만 광고 제거을 곁들인\n일반적으로 사용하는 크롬 플러그인과 다르게 네트워크단에서 광고를 차단하기 때문에 성능저하가 덜하다.\n또한 플러그인에 비해 비교 불가능한 장점이 있는데, 공유기에 DNS서버를 pihole로 설정하면 해당 네트워크 전체에 적용된다.\n그러니까 스마트폰에서도 된단 소리다\n이러한 장점이 있으나 무조건 해야겠지?\n설치과정 설치하는 방법은 크게 2가지로 나뉜다.\n  설치스크립트를 이용하는 방법\ncurl -sSL https://install.pi-hole.net | bash\n입력한 뒤에 선택창같은게 뜰꺼다.\n눈칫것 설정해주자.\n곧 pi hole이 실행될 것이다.","title":"📡 pi hole을 이용한 광고 제거"},{"content":"제목에 대해서 사실, 노트북이 크게 고장난건 아니다.\n정확히 말하자면 비정상화랄까?\n사건의 재구성 내가 쓰고 있는 thinkpad T470이 처음에 ebay에서 망가진체로 한국에 입국한걸 생각하면 놀랍지도 않는데,\n아침에 노트북을 열다가 갑자기 힌지가 덜컹(?)이는게 느껴지는거다..\n뭔가 망했음을 느끼고 빨리 힌지쪽 나사를 쪼여주지 않으면 조만간 디스플레이가 분리될꺼 같다고 생각하기 시작했다.\n마침 온라인클래스라서 뭔가 일을 저질르기 최적이였고 머릿속으로 이런 계획을 세웠다.\n 노트북을 분해해서 힌지쪽 나사를 쪼여준다. 저번에 ssd 문제 (pm981)로 실패한 해킨토시를 다시 설치하자! 지난 2번과는 다르게 멋지게 하판분해에 성공해 플라스틱이 부서지지않은 상태로 다시 조립하자!  라는 계획을 세웠고 해킨토시 계획은 마침 호환되는 128gb짜리 m.2 ssd가 남아서 세운 계획이였다. 잘작동하면 ssd하나 사서 해킨하면서 놀 생각이였지..\n계획중 몇가지는 성공하고 몇가지는 실패했는데,\n해킨은 성공하고 1번과 3번은 실패했다.\n일단 ssd만 변경하니 해킨은 정말 잘 작동했다.\n인텔칩인데도 wifi가 잡히는건 물론 icloud 연동까지 보기 좋게 연동됬다.\n잘작동되어 신나는 마음으로 해킨토시에 잘맞는 최소 250GB이상의 nvme ssd 제품을 검색했고,\n결과로 WD의 SN750이란 모델이 잘 작동한다고 찾아냈고 마침 가격도 생각보다 저렴했다.\n이제 힌지 수리하고 재조립만 하면 되는데 여기가 심각한 문제가 발생한다.\n힌지쪽 나사가 마모되어 안 쪼여질뿐더러 하판 나사까지 마모되어 재결합이 안되는 초유의 사테가 발생한다.\n또한 하판의 고정 플라스틱도 싹 갈아먹은 실수를 하고 만다.\n이번까지하면 3번째다..\n지출정리 이제 노트북에 발생할 비용은 크게 3가지로 나뉜다.\n 해킨토시를 위한 WD SN750 500GB or 250GB 마모된 힌지를 위한 m.25 * 4 규격의 평면나사 쪼가먹은 플라스틱과 하판 나사 보수에 들어갈 비용  이렇게 정리되고 다 합하면 최소비용이 13만원 정도로 감당할수 없게 되버린다.\n내 용돈은 5만원이고 가지고 있는 돈이 6만원이기에 한달을 그지로 한다는 가정하에 9월 1일에 11만원 가량을 사용할 수 있게 된다.\n따라서 뭔가를 뒤로 미뤄야되는데 분명 재조립후 다시 분해를 한다면 추가 비용이 발생할 것이고,\nSSD, 힌지 나사는 조립전에 조달해야된다.\n그렇다고 위의 2을 우선순위에 두게 된다면 길게는 다음달까지 하판이 완전히 조립되지 않은 상태에서 사용해야된다..\n결론 솔직히 나도 어떻게 해야 될지 모르겠다. 정리했을때 지출이 가장 적고 가장 급한건 힌지 나사니까 1순위로 두고, 해킨토시는 잘 사용할 일이 없을꺼같으니 (사실 맥은 리눅스 커널 빌드도 안되거든~)\n나사 + 하판수리만 한다면 당장 주문하는 것도 가능한 사실이다!\n킹치만 그렇다고 T470에서의 해킨을 영원히 포기해..?\n짜피 리눅스 아님 원도우 쓸꺼면서..\n쫌 더 고민해 보고 결정해야겠다.\n","permalink":"http://minpeter.github.io/posts/til/2021-08-30-%EB%85%B8%ED%8A%B8%EB%B6%81-%EA%B3%A0%EC%9E%A5/","summary":"제목에 대해서 사실, 노트북이 크게 고장난건 아니다.\n정확히 말하자면 비정상화랄까?\n사건의 재구성 내가 쓰고 있는 thinkpad T470이 처음에 ebay에서 망가진체로 한국에 입국한걸 생각하면 놀랍지도 않는데,\n아침에 노트북을 열다가 갑자기 힌지가 덜컹(?)이는게 느껴지는거다..\n뭔가 망했음을 느끼고 빨리 힌지쪽 나사를 쪼여주지 않으면 조만간 디스플레이가 분리될꺼 같다고 생각하기 시작했다.\n마침 온라인클래스라서 뭔가 일을 저질르기 최적이였고 머릿속으로 이런 계획을 세웠다.\n 노트북을 분해해서 힌지쪽 나사를 쪼여준다. 저번에 ssd 문제 (pm981)로 실패한 해킨토시를 다시 설치하자! 지난 2번과는 다르게 멋지게 하판분해에 성공해 플라스틱이 부서지지않은 상태로 다시 조립하자!","title":"😂 노트북 고장 (TIL)"},{"content":"오늘 공부한 것 오늘부터 시간이 날때마다 커널에 대해 조금씩 공부하기로 마음먹었다!\n원도우에서 wsl2, sandbox, hyper-V 같은 가상화를 이용하는 기술에 대해 공부하던 중,\nhyper-v에 type1과 type2에 대해 알게되었고, 이로 인해 전에 wsl2와 VMware을 같이 못쓰는 이유에 대해 이해하게 되었다!\n(VMware는 type1을 이용 WSL2, sandbox는 type2이용)\n이때 hyper-v type 1의 형테에서 흥미를 느꼈는데, 저 구조대로면 windows도 hypervisor 상의 GuestOS가 되어야 되기 때문이다.\n조금 더 자료를 찾아보니 이런 사진을 찾을 수 있었다.\n역시 예상대로였다.\nwindows NT Kernel 이라는 이름으로 hypervisor에 Linux Kernel과 동급하게 올라가있는 모습을 볼 수 있다.\n그리고 Windows NT 커널은 하이브리드 커널이고 Linux 커널은 모놀리식 커널이라는 커널의 종류 같은 것도 알게 되었고, 다시금 커널 공부를 하고 싶게 만들었다.\n마침 리눅스 30주년으로 뽕에 차있던 나, 커널 공부를 시작했다고한다.\n","permalink":"http://minpeter.github.io/posts/til/2021-08-29-lfs/","summary":"오늘 공부한 것 오늘부터 시간이 날때마다 커널에 대해 조금씩 공부하기로 마음먹었다!\n원도우에서 wsl2, sandbox, hyper-V 같은 가상화를 이용하는 기술에 대해 공부하던 중,\nhyper-v에 type1과 type2에 대해 알게되었고, 이로 인해 전에 wsl2와 VMware을 같이 못쓰는 이유에 대해 이해하게 되었다!\n(VMware는 type1을 이용 WSL2, sandbox는 type2이용)\n이때 hyper-v type 1의 형테에서 흥미를 느꼈는데, 저 구조대로면 windows도 hypervisor 상의 GuestOS가 되어야 되기 때문이다.\n조금 더 자료를 찾아보니 이런 사진을 찾을 수 있었다.\n역시 예상대로였다.","title":"🐧 LFS (TIL)"},{"content":"zsh과 oh-my-zsh, p10k의 사이 zsh은 bash같은 친구를 대체하는 심미적인 부분을 더해주는 쉘이다.\n(적어도 내가 느끼기에는 그랬다)\n여기서 oh-my-zsh이 나오는데 zsh에 theme와 plugin을 설정할 수 있게 해준다.\n그리고 oh-my-zsh의 테마로 등장하는 친구가 p10k이다.\n장점으로는 멋있고! 커스터마이징이 가능하다!!!\n공식 글꼴을 깔면 배포판 로고나 깃관련된 이모지나 폴더 아이콘이 터미널에 표시되는등 신기한 기능도 있다.\nzsh 설치하기 sudo apt-get install zsh\n대부분 다른 배포판도 패키지 관리자만 변경하면 동작한다.\n예를 들면 arch에서는\nsudo pacman -S zsh\nfedora에서는\nsudo dnf install zsh\noh-my-zsh 설치하기 sh -c \u0026quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026quot;\n그렇다 모든 베포판이 동일할 것이라고 예상이 된다.\n중간에 zsh을 기본쉘로 변경한다고 패스워드를 입력하라고 하는데.. 당연히 입력해주자\npower level 10k (p10k) 설치 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/themes/powerlevel10k\n이 친구도 oh-my-zsh만 설치되있다면 정상적으로 작동한다.\np10k theme 적용 vim ~/.zshrc\n다른 편집기가 편하면 그거 쓰면 된다.\nZSH_THEME=\u0026quot;robbyrussell\u0026quot; -\u0026gt; ZSH_THEME=\u0026quot;powerlevel10k/powerlevel10k\u0026quot; 로 수정해주면 된다\nfont 설치 여기서 폰트를 선택해야된다.\n기본적으로 powerline 폰트만 포함된 고정폭폰트면 뭐든 상관없으나 D2coding, MesloLGS NF, Fira Code 중에서 선택하는 걸 추천한다.\n참고로 MesloLGS NF가 p10k 공식 폰트며 해당 폰트 설치시 아이콘을 표시하는 옵션이 생성된다.\n이부분은 운영체제, 설치환경 등에 따라 다르니 각자 폰트 설치법, 터미널 폰트 설정법을 찾아 설정하기 바란다\np10k setting p10k configure 명령어로 p10k 테마 커스터마이징을 할 수 있다.\n잘 읽고 선호 하는 설정으로 설정해주면 자신만의 p10k theme가 완성된다.\n참고자료 abdfnx/oh-my-zsh-powerlevel10k-cool-terminal-1no0\nruddms936/zsh-설치\nFiraCode\nD2coding\nMesloLGS NF\n","permalink":"http://minpeter.github.io/posts/linux/2021-08-29-zsh-p10k-%EC%84%A4%EC%B9%98/","summary":"zsh과 oh-my-zsh, p10k의 사이 zsh은 bash같은 친구를 대체하는 심미적인 부분을 더해주는 쉘이다.\n(적어도 내가 느끼기에는 그랬다)\n여기서 oh-my-zsh이 나오는데 zsh에 theme와 plugin을 설정할 수 있게 해준다.\n그리고 oh-my-zsh의 테마로 등장하는 친구가 p10k이다.\n장점으로는 멋있고! 커스터마이징이 가능하다!!!\n공식 글꼴을 깔면 배포판 로고나 깃관련된 이모지나 폴더 아이콘이 터미널에 표시되는등 신기한 기능도 있다.\nzsh 설치하기 sudo apt-get install zsh\n대부분 다른 배포판도 패키지 관리자만 변경하면 동작한다.\n예를 들면 arch에서는\nsudo pacman -S zsh","title":"🤞 zsh p10k 설치"},{"content":"내가 리눅스로 가기로 결정한 이유 windows 11으로 업데이트 한지도 한참 지난 나는.. 슬슬 세로움을 원했고 덤으로 2c4s의 i5 6gen cpu의 한계를 느끼고 리눅스로의 이주를 결정했다.\n하지만 이게 잘못된 선택이라는 것을 깨달기까지는 오래걸리지 않았다..\n 리눅스 데스크탑 환경을 설정하면서 느낀점   한글입력의 어려움\n어렵다. 특히 wayland 환경에서 한글입력은 초기단계이고, 사실 wayland의 입력기 표준이 아직 없어서 arch의 wm로 sway을 결정한걸 엄청 후회했다.\n따라서 한글 입력이라도 해결해볼려고 fedora를 설치했는데 세롭게 업데이트된 gnome 40이 환영해주었다.\n당연히 wayland가 디폴트로 설정되있고 현제 wayland에서 사용가능한 몇 안되는 입력기인 ibus 또한 기본이였기에 어렵지 않게 한글을 입력할 수 있었다.\n여기서 문제 하나가 더 터져나온다..\n  데비안(deb) 계열이 아니라면 찬밥 신세가 될 수도 있는 페키지 환경..(?)\n페도라를 설치하고 한글 입력이 잘되서 신나하던 참이였다. 디스코드를 설치하려는데 공식 지원 페키지가 *.deb 하나였다..\n나머지는 압축파일 형식의 실행파일만 주였는데.. 현타가 왔다..\n페키지 설치가 간단해서 리눅스를 선호하는 것도 분명 있는데 내가 왜 이러고 있는가,,;;\n물론 arch을 사용한다면 킹갓 AUR가 전부 해결해주었지만 나는 sway에서 한글입력을 문제로 arch는 포기한 상태..\n  균일하지않는 윈도우\n이건 사실 원도우도 조금은 포함되는데 창모양이 따로 노는 친구들이 있다.\n원도우에서는 레거시 프로그램에서 발생하는데 리눅스는 qt gtk같은 툴팃의 차이에서 온다고 들었다.\n모르겠다 아직 늅늅이라서 해결할 수 있는 문제일 수도 있겠다.\n하지만 딱히 기능적으로 문제가 있는건 아니기에 그냥 원도우 향수병이라고 할 수 있겠다.\n  셋팅하다보면 오는 심신미약\ndocker하고 minikube 설치해서 사용해보니 확실히 네이티브한 맛이 느껴졌다. 잔뜩 켜두어도 램을 4GB만 점유하는 마법! (os포함!)\n내가 원했던건 딱 여기까지인데 설치하면서 심리적 고통까지는 원하지 않았다.\n솔직히 리눅스를 잘 다루면 상관없는데 한 6개월 원도우 쓰다가 돌아갈려니까 머리가 어질어질하다.\n전에 리눅스 처음 접했을때는 신기한 것도 있었고 시간이 엄~청나게 많이 남았었기 때문에 직접 갈리기도 좋았다.\n하지만 지금은 3일 동안 난리를 치다보니 정신도 지치고 개발도 못하는게 (심지어는 블로그 글까지..) 더 크게 다가왔다.\n   결론 따라서 필자는 그냥 windows 11으로 돌아왔다고 전해진다.\nMS의 큰 은총으로 i5-6300u가 공식 지원 리스트에 올라가길 기원하며\n(글쓰기 몇시간전에 windows 11 최초로 서피스에 탐제된 7gen cpu가 추가 지원 목록에 들어간걸 보니 완전히 불가능하지도 않아보인다.. 힘내라..)\n음.. 만약 지원도 안해준다면 일단 마음가짐을 잘 버텨서 고오수가 된 뒤에 대회 상금으로 12gen 인텔 씨퓨 달고 나오는 thinkpad t24 또는 t14gen3을 산다는 마인드로 공부에 집중해야겠다.\n","permalink":"http://minpeter.github.io/posts/til/2021-08-28-%EC%98%A4%EB%8A%98%EC%9D%98-%EC%82%BD%EC%A7%88/","summary":"내가 리눅스로 가기로 결정한 이유 windows 11으로 업데이트 한지도 한참 지난 나는.. 슬슬 세로움을 원했고 덤으로 2c4s의 i5 6gen cpu의 한계를 느끼고 리눅스로의 이주를 결정했다.\n하지만 이게 잘못된 선택이라는 것을 깨달기까지는 오래걸리지 않았다..\n 리눅스 데스크탑 환경을 설정하면서 느낀점   한글입력의 어려움\n어렵다. 특히 wayland 환경에서 한글입력은 초기단계이고, 사실 wayland의 입력기 표준이 아직 없어서 arch의 wm로 sway을 결정한걸 엄청 후회했다.\n따라서 한글 입력이라도 해결해볼려고 fedora를 설치했는데 세롭게 업데이트된 gnome 40이 환영해주었다.","title":"⛏️ 오늘의 삽질 (TIL)"},{"content":"자ㅏ자\u0026hellip; 이제 github-pages 설정하는 방법를 알아보도록 하자.\n일단 github-pages를 사용하는 방법은 생각보다 많은데 그 중 한가지 방법을 소개하는 것이니 감안하고 보는 것이 좋을 것 같다.\nRuby 설치하기 루비를 설치하는 방법은 여러가지가 있다. 나는 루비를 사용하지도 사용할줄도 모른다. 하지만 검색을 해보니 rvm이라는 루비 버전 메니저가 있었는데, NodeJS에 nvm처럼 편리할것이라고 예상되어 rvm을 이용한 설치를 진행하였다!! 이게 실수일꺼라고는 생각을 안했었지..\n추천은 rvm.io의 공식 문서를 참고하는것이지만 간단하게 설명하면\n1  $ gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB #install GPG keys   1  $ \\curl -sSL https://get.rvm.io | bash   한 뒤에 터미널을 한번 재시작해주면 rvm명령어가 작동할 것이다.\n킹치만.. 여기시 한가지 작은 문제가 발생하는데 zsh을 이용할경우 zsh 설치과정를 통해 설정을 해야되는데 이게 어려울 뿐만 아니라 거희 모든 zsh 유저가 사용하는 oh-my-zsh를 이용할 경우 공식페이지에서 직접 rvm를 안쓰는걸 추천한다고 하니..\nzsh + oh-my-zsh 조합을 사용하는 나로써는 최악이였다.\n사실 이걸 몰랐을때만 하더라고도\n1  $ \\curl -sSL https://get.rvm.io | zsh   명령어를 통해 설치했는데 모르고 사용하다보니 문제가 생겼다..\n터미널 실행시 rvm이 자동실행이 안되고 매번 수동으로 시작을 해줘야되는\u0026hellip;\njekyll, bundler 설치하기 \u0026amp; 프로젝트 만들기 일단 설치한 뒤로는 문제가 없었다, 사실 본인도 루비를 몰라서 무슨 문젠지 모르겠다..ㅜ\n계속하자면\n1 2 3  $ gem install jekyll bundler # jekyll, bundler 설치 $ jekyll new username.github.io #username에는 자신의 github id를 입력 $ cd username.github.io #username.github.io 폴더로 이동   여기까지 실행했다면 기본적으로 설정되어있는 테마로 블로그를 실행시킬수 있는데 다음 명령어를 입력하면 된다.\n1  $ bundle exec jekyll serve #jekyll 서버 실행   이후 브라우저로 127.0.0.1:4000에 접속하면 블로그가 보일 것이다.\n테마 설정하기 내가 적용한 테마는 chirpy라는 테마이다. 해당 github repo README 파일에 잘 설명되어있기 때문에 간단하게 설명하겠다.\nGemfile을 만들거나 편집해야되는데 맨 아랫줄에 다음 내용을 적어주면 된다.\n1  gem \u0026#34;jekyll-theme-chirpy\u0026#34;   _config.yml을 만든경우 추가해주고 편집한 경우 theme를 찾아 변경해주자\n1  theme: jekyll-theme-chirpy   그리고 아래 명령을 실행하자\n1  $ bundle   다음으로는 조금 까다로운 단계인데\n1  $ cd \u0026#34;$(bundle info --path jekyll-theme-chirpy)\u0026#34;   명령으로 chirpy테마가 설치된 폴더로 이동하고 해당 디렉토리의\n1 2 3 4 5 6  . ├── _data ├── _plugins ├── _tabs ├── _config.yml └── index.html   파일을 프로젝트 폴더에 복사해 주자 (중복되는경우 덮어쓰기) 이제 서버를 실행하면 기본 chirpy 테마가 로컬 4000번에서 실행될 것이다. 이후 단계는 설명하기가 어렵다. _config.yml 파일을 잘 찾아서 알맞게 이름, 이메일 등으로 대체해 주고 about.md 등으로 수정한 뒤 서버을 실행하면 적용된 모습을 볼수 있을 것이다!!\n 참고로 index.md 파일이 존재할경우 삭제해야 정상적으로 작동된다. 게시글 작성은 _posts 디렉토리에 날짜-게시글재목.md 형식으로 생성하면 된다.  github-pages에 배포하기 이 부분에서 난 한가지 결심을 했다. 사실 많은 (많지는 않다) 정적 사이트 생성기 중에서 처음보는 ruby의 jekyll를 고른 이유는 github pages에서 강력하게 지원하고 있어서인데.. 내가 고른 테마는 깃허브 내의 어떤 빌드 옵션으로 인해 바로 빌드가 불가능하다고 한다.\n따라서 GitHub Actions를 이용해야 한다고 한다. actions으로 빌드한 뒤에 빌드내용을 따로 브랜치를 만들어서 해당 브랜치를 github pages에 등록한다는 것인데\u0026hellip; 사실 이를 이용하면 다른 정적사이트 생성기를 사용해도 문제가 없다!!\n따라서! rvm의 zsh issue, github pages의 비밀이 더해져.. 이 블로그는 한동안 사용하다가 go로 만들어진 사이트 생성기 HUGO로 이동할까 생각중이다.. 솔직히 RVM oh-my-zsh은 선넘었지..ㅜ\n","permalink":"http://minpeter.github.io/posts/github/2021-08-23-2%EB%B6%80-ruby%EC%99%80-jekyll-%EA%B7%B8%EB%A6%AC%EA%B3%A0-github-pages/","summary":"자ㅏ자\u0026hellip; 이제 github-pages 설정하는 방법를 알아보도록 하자.\n일단 github-pages를 사용하는 방법은 생각보다 많은데 그 중 한가지 방법을 소개하는 것이니 감안하고 보는 것이 좋을 것 같다.\nRuby 설치하기 루비를 설치하는 방법은 여러가지가 있다. 나는 루비를 사용하지도 사용할줄도 모른다. 하지만 검색을 해보니 rvm이라는 루비 버전 메니저가 있었는데, NodeJS에 nvm처럼 편리할것이라고 예상되어 rvm을 이용한 설치를 진행하였다!! 이게 실수일꺼라고는 생각을 안했었지..\n추천은 rvm.io의 공식 문서를 참고하는것이지만 간단하게 설명하면\n1  $ gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB #install GPG keys   1  $ \\curl -sSL https://get.","title":"💎 2부 Ruby와 Jekyll 그리고 github-pages"},{"content":"github-pages.. 벌써 3~4번은 시도했었지만 jekyll를 이용해서 시도한건 전부 실패했었다.\n마음에 드는 테마는 설정이 어렵거나 프로그래밍를 접한지 얼마되지 않아 jekyll이라 것이 어떻게 작동하는지도 파악이 안됬다.\n그래서 notion이나 아이패드 일기앱에 메모나 그날 배운걸 적어두곤 했는데, 생각해보니 나중에 포트폴리오나 다른 사람에게 보여줄때 불편함이 예상되었다.\n마침 학교에서 선배님이 개발블로그를 만들어 두면 좋을 것 같다고 조언해 주셨고 다시 github-pages에 도전하기로 했다!! 🙌\n가장 먼저 해야될건 테마를 골라야되는데 처음에는 no-style-please라는 테마를 사용하고 싶었는데 이 테마가 생각보다 설정하기 어려워서 jekyll-theme-chirpy라는 테마를 이용하게 됬다. (star도 많은 편이고 fork도 1.8k나 됬다!)\n테마 골랐고 다음으로는.. 걍 테마에 README 파일 읽으면서 만들면된다 :)\n이렇게 끝내면 아마도 TIL도 아니고 블로그 글도 아니겠지!?\n그래서 작성해보았다! chirpy 테마를 이용한 github-pages blog 제작방법!!\n2부에서 계속된다\n","permalink":"http://minpeter.github.io/posts/github/2021-08-22-1%EB%B6%80-ruby%EC%99%80-jekyll-%EA%B7%B8%EB%A6%AC%EA%B3%A0-github-pages/","summary":"github-pages.. 벌써 3~4번은 시도했었지만 jekyll를 이용해서 시도한건 전부 실패했었다.\n마음에 드는 테마는 설정이 어렵거나 프로그래밍를 접한지 얼마되지 않아 jekyll이라 것이 어떻게 작동하는지도 파악이 안됬다.\n그래서 notion이나 아이패드 일기앱에 메모나 그날 배운걸 적어두곤 했는데, 생각해보니 나중에 포트폴리오나 다른 사람에게 보여줄때 불편함이 예상되었다.\n마침 학교에서 선배님이 개발블로그를 만들어 두면 좋을 것 같다고 조언해 주셨고 다시 github-pages에 도전하기로 했다!! 🙌\n가장 먼저 해야될건 테마를 골라야되는데 처음에는 no-style-please라는 테마를 사용하고 싶었는데 이 테마가 생각보다 설정하기 어려워서 jekyll-theme-chirpy라는 테마를 이용하게 됬다.","title":"💎1부 Ruby와 Jekyll 그리고 github-pages"},{"content":"개요 라즈베라파이 제로 세팅중 ssh 접속을 위해 nmap스캔을 하던 도중\n내 노트북에 22번 포트가 오픈돼 있다는 것을 발견했다.\n해결방법 ssh 서버를 종료하면 간단하게 해결된다. 따라서\n  sudo service ssh stop\n  sudo systemctl status ssh (서버스 상태 확인)\n  추가로! 명령어 service를 알아보도록 하자\nUsage: service \u0026lt; option \u0026gt; | --status-all | [ service_name [ command | --full-restart ] ]\n위에 command에는 start|stop|reload|force-reload|restart|try-restart|status가 있다\nEND\n작성이유는\u0026hellip; 나중에 ssh 쓸일있을때 서버 실행하게 ㅎ\n","permalink":"http://minpeter.github.io/posts/linux/2020-01-01-linux-service-command/","summary":"개요 라즈베라파이 제로 세팅중 ssh 접속을 위해 nmap스캔을 하던 도중\n내 노트북에 22번 포트가 오픈돼 있다는 것을 발견했다.\n해결방법 ssh 서버를 종료하면 간단하게 해결된다. 따라서\n  sudo service ssh stop\n  sudo systemctl status ssh (서버스 상태 확인)\n  추가로! 명령어 service를 알아보도록 하자\nUsage: service \u0026lt; option \u0026gt; | --status-all | [ service_name [ command | --full-restart ] ]\n위에 command에는 start|stop|reload|force-reload|restart|try-restart|status가 있다\nEND\n작성이유는\u0026hellip; 나중에 ssh 쓸일있을때 서버 실행하게 ㅎ","title":"⚙️ Linux service command"},{"content":"개요 위 사진에 보이는 \u0026lsquo;포맷(F)\u0026hellip;\u0026rsquo;' 버튼이 잠시 동안 버그가 있었다.\nbugs_launchpad에 따르면 대충 gnome-disk-utility가 노트러스와 포트가 안맞아서 그랬다고 한다.\nbugs_launchpad에 버그 리포트 계시글\n해결방법 현제는 해결된 버그이기 때문에 (업데이트 좀 잘하자) 업데이트만 해주면 고쳐진다\n  ctrl+alt+T\n  sudo apt-get update\n  sudo apt-get upgrade\n  END\n작성이유는\u0026hellip; 나중에 비슷한 문제가 생기면 업데이트 먼저하는 사람이 되기 위해 쓴다 ㅎ\n","permalink":"http://minpeter.github.io/posts/linux/2020-01-01-%EB%85%B8%ED%8B%B8%EB%9F%AC%EC%8A%A4-%ED%8F%AC%EB%A9%A7-%EC%98%B5%EC%85%98-%EC%98%A4%EB%A5%98/","summary":"개요 위 사진에 보이는 \u0026lsquo;포맷(F)\u0026hellip;\u0026rsquo;' 버튼이 잠시 동안 버그가 있었다.\nbugs_launchpad에 따르면 대충 gnome-disk-utility가 노트러스와 포트가 안맞아서 그랬다고 한다.\nbugs_launchpad에 버그 리포트 계시글\n해결방법 현제는 해결된 버그이기 때문에 (업데이트 좀 잘하자) 업데이트만 해주면 고쳐진다\n  ctrl+alt+T\n  sudo apt-get update\n  sudo apt-get upgrade\n  END\n작성이유는\u0026hellip; 나중에 비슷한 문제가 생기면 업데이트 먼저하는 사람이 되기 위해 쓴다 ㅎ","title":"👨‍🔧 노틸러스 포멧 옵션 오류"},{"content":"개요 위 사진에 보이는 \u0026lsquo;포맷(F)\u0026hellip;\u0026rsquo;' 버튼이 잠시 동안 버그가 있었다.\nSobi.Tips에 따르면 qt5 라이브러리 최신버전의 문제 라고 한다\n만자로 KDE : ibus 한글 모드에서 특정 키 오작동 증상 해결하기\n해결방법 qtbase 5.13에서 fix할꺼라고 하지만 기다리기 싫으니 다른 방법을 사용하자\n  ctrl+alt+T\n  gsettings get org.freedesktop.ibus.engine.hangul use-event-forwarding (기본값 확인)\n  gsettings set org.freedesktop.ibus.engine.hangul use-event-forwarding false\n  재부팅\n  END\n작성이유는\u0026hellip; qtbase 5.13 패치 이후 gsettings set org.freedesktop.ibus.engine.hangul use-event-forwarding true 를 입력해 값을 원복 해야되기 때문에 작성한다.\n","permalink":"http://minpeter.github.io/posts/linux/2020-01-01-ibus-qt5-%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5-%EC%98%A4%EB%A5%98/","summary":"개요 위 사진에 보이는 \u0026lsquo;포맷(F)\u0026hellip;\u0026rsquo;' 버튼이 잠시 동안 버그가 있었다.\nSobi.Tips에 따르면 qt5 라이브러리 최신버전의 문제 라고 한다\n만자로 KDE : ibus 한글 모드에서 특정 키 오작동 증상 해결하기\n해결방법 qtbase 5.13에서 fix할꺼라고 하지만 기다리기 싫으니 다른 방법을 사용하자\n  ctrl+alt+T\n  gsettings get org.freedesktop.ibus.engine.hangul use-event-forwarding (기본값 확인)\n  gsettings set org.freedesktop.ibus.engine.hangul use-event-forwarding false\n  재부팅\n  END\n작성이유는\u0026hellip; qtbase 5.13 패치 이후 gsettings set org.","title":"🔧 ibus qt5 한글 입력 오류"},{"content":"개요 우분투 20.04의 기본 로그인 배경은 보라색이다.\n보통의 경우 이를 변경하지 않고 사용하지만 로그인 전과 로그인 후의 테마가 일치 하지 않아 변경하고 싶었다\n이를 변경하는 방법은 우분투 19까지는 간단하게 ccs파일만 수정하면 됬다.\n하지만 20부터는 .gresource파일을 수정하고 다시 컴파일까지 해야한다.\n다행이도 이를 간단하게 해주는 스크립트가 여러가지 있는데 그 중 하나가 focalgdm3이다.\n해결방법   필용한 페키지 설치 : sudo apt install git libglib2.0-dev\n  스크립트 복제 : git clone https://github.com/PRATAP-KUMAR/focalgdm3.git\n  스크립트 실행 : sudo ./focalgdm3/focalgdm3 \u0026ndash;set\n  사용자 암호 입력, 1을 선택한경우 이미지 경로입력, 2를 선택한 경우 색상 코드를 입력하자.\n  END\n","permalink":"http://minpeter.github.io/posts/linux/2020-01-01-ubuntu-20.04%EC%97%90%EC%84%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%B0%B0%EA%B2%BD%EC%9D%84-%EB%B3%80%EA%B2%BD%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95/","summary":"개요 우분투 20.04의 기본 로그인 배경은 보라색이다.\n보통의 경우 이를 변경하지 않고 사용하지만 로그인 전과 로그인 후의 테마가 일치 하지 않아 변경하고 싶었다\n이를 변경하는 방법은 우분투 19까지는 간단하게 ccs파일만 수정하면 됬다.\n하지만 20부터는 .gresource파일을 수정하고 다시 컴파일까지 해야한다.\n다행이도 이를 간단하게 해주는 스크립트가 여러가지 있는데 그 중 하나가 focalgdm3이다.\n해결방법   필용한 페키지 설치 : sudo apt install git libglib2.0-dev\n  스크립트 복제 : git clone https://github.com/PRATAP-KUMAR/focalgdm3.git","title":"🛠️ Ubuntu 20.04에서 로그인 배경을 변경하는 방법"},{"content":"개요 본인은 thinkpad T470을 이용중이며 네이버에 TP홀릭에 가입되어있다.\nTP홀릭 게시판에 잊을만하면 올라오는 글이 있는데 바로 bios부팅로고를 변경하는 방법에 대한 글이다.\n변경전 바이오스 로고는 빨간색에 레노버가 써있어 보기가 좋지않다\n해결방법 다행이 바이오스 업데이트 파일을 수정하여 바이오스 로고을 수정하는 방법이 있다.\n하지만 대부분의 글들은 윈도우 기준으로 설명을 하고 있을뿐 리눅스에서 로고를 변경하는 방법에 대해서는 설명해주지 않는다.\n리눅스에서 방법은 다음과 같다\n  레노버 pc 기술지원에서 자신의 모델명을 검색한다.\n  드라이버 및 소프트웨어를 클릭한다\n  BIOS 항목에서 BIOS 업데이트 (유틸리티 \u0026amp; 부팅 CD) 탭에서 Bootable CD 파일을 다운받는다.\n  ~~.iso 파일이 다운되었으면 geteltorito -o bios-image.img ~~~.iso 명령을 입력한다 ( ~~~는 자신의 값으로 대입)\n  usb를 하나 설치하고 (정보가 날아가니 유의) lsblk 명령어로 장비 경로?를 알아낸다\n  sudo dd if=bios-image.img of=/dev/sdX bs=1M status=progress oflag=sync 명령을 입력하되 of=/dev/sd뒤의 값은 자신의 장비에 맞게 수정하자\n  usb를 열어보면 EFI, FLASH 폴더가 있을텐데 그중 FLASH 폴더 아래 로고 이미지를 넣으면 된다!\n  ※이미지 확장자는 GIF, BMP, JPG만 지원되며 해상도는 노트북 해상도의 40%, 용량은 60kb를 넘으면 안된다※ 이제 해당 usb로 부팅한후 y와 enter를 적절히 누르면 바이오스 업데이트하 함께 로고 이미지가 적용된다!  END\n작성이유는\u0026hellip; 바이오스가 업데이트가 되면 풀릴까봐 풀리면 다시 하기위해 적어두었다\n","permalink":"http://minpeter.github.io/posts/linux/2020-01-01-%EB%A6%AC%EB%88%85%EC%8A%A4%EC%97%90%EC%84%9C-thinkpad-%EB%B6%80%ED%8C%85%EB%A1%9C%EA%B3%A0-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B3%80%EA%B2%BD/","summary":"개요 본인은 thinkpad T470을 이용중이며 네이버에 TP홀릭에 가입되어있다.\nTP홀릭 게시판에 잊을만하면 올라오는 글이 있는데 바로 bios부팅로고를 변경하는 방법에 대한 글이다.\n변경전 바이오스 로고는 빨간색에 레노버가 써있어 보기가 좋지않다\n해결방법 다행이 바이오스 업데이트 파일을 수정하여 바이오스 로고을 수정하는 방법이 있다.\n하지만 대부분의 글들은 윈도우 기준으로 설명을 하고 있을뿐 리눅스에서 로고를 변경하는 방법에 대해서는 설명해주지 않는다.\n리눅스에서 방법은 다음과 같다\n  레노버 pc 기술지원에서 자신의 모델명을 검색한다.\n  드라이버 및 소프트웨어를 클릭한다","title":"🧑‍💻 리눅스에서 thinkpad 부팅로고 이미지 변경"}]