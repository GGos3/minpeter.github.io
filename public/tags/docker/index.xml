<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on minpeter DEV blog</title>
    <link>http://minpeter.github.io/tags/docker/</link>
    <description>Recent content in docker on minpeter DEV blog</description>
    <image>
      <url>http://minpeter.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://minpeter.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 14 Sep 2021 08:23:00 +0900</lastBuildDate><atom:link href="http://minpeter.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>🕸️ stack 서비스를 외부에서 사용하기</title>
      <link>http://minpeter.github.io/posts/server/2021-09-14-stack-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Tue, 14 Sep 2021 08:23:00 +0900</pubDate>
      
      <guid>http://minpeter.github.io/posts/server/2021-09-14-stack-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description>기본적으로 stack에서 실행되는 서비스를 외부에 접속하기위해선 manager 노드와 연결되어야한다.
하지만 전 포스트에서 만든 echo stack은 constraints: [node.role != manager]옵션으로 매니저에서는 실행되지 않도록 설정했기 때문에 각각 컨테이너가 여러 노드에 분산되어있기때문에 전에 visualizer 서비스를 만들때와 같은 방식 또한 사용할수 없다.
따라서 클러스터 외부의 트래픽을 내부로 보내주는 프록시 서버를 구성해보겠다.
haproxy 이미지를 사용하여 외부트래픽이 nginx 컨테이너로 가도록 설정해보자.
ingress.yaml
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  version: &amp;#34;3&amp;#34; services: haproxy: image: dockercloud/haproxy networks: - test volumes: - /var/run/docker.</description>
    </item>
    
    <item>
      <title>🦕 docker stack visualizer</title>
      <link>http://minpeter.github.io/posts/server/2021-09-13-docker-stack-visualizer/</link>
      <pubDate>Mon, 13 Sep 2021 12:05:00 +0900</pubDate>
      
      <guid>http://minpeter.github.io/posts/server/2021-09-13-docker-stack-visualizer/</guid>
      <description>개요 visualizer는 2016 dockercon에서 stack기능 소개를 위해 만들어진 툴이다.
이를 이용하면 swarm모드에서 노드와 컨테이너의 분포상태를 시각적으로 볼수 있다.
실습 visualizer.yaml
1 2 3 4 5 6 7 8 9 10 11 12 13  version: &amp;#34;3&amp;#34; services: app: image: dockersamples/visualizer ports: - &amp;#34;9000:8080&amp;#34; volumes: - /var/run/docker.sock:/var/run/docker.sock deploy: mode: global placement: constraints: [node.role == manager]   컨테이너를 이용해 실습하고 있다면 docker cp명령어로 파일을 옮겨주자
1  $ docker cp visualizer.yaml manager:/visualizer.</description>
    </item>
    
    <item>
      <title>🐙 Swarm의 compose stack</title>
      <link>http://minpeter.github.io/posts/server/2021-09-12-swarm%EC%9D%98-compose-stack/</link>
      <pubDate>Sun, 12 Sep 2021 21:05:00 +0900</pubDate>
      
      <guid>http://minpeter.github.io/posts/server/2021-09-12-swarm%EC%9D%98-compose-stack/</guid>
      <description>swarm에서 compose 전에서 run명령어와 비슷한 service 명령어를 이용해 swarm에 컨테이너를 띄우고 스케일을 조정해보았다.
이번엔 compose명령어와 비슷한 stack에 대해 알아보자.
스택이란 하나 이상의 서비스를 그룹으로 묶은 단위로, 애플리케이션 저체 구성을 정의한다.
그냥 간단하게 swarm에서 작동하는 (스케일기능이 포함된) compose라고 생각하자
또 특징으로는 compose와 동일하게 같은 네트워크에 포함되게된다.
일단 네트워크을 하나 생성해주자
1 2  $ docker exec -it manager \ docker network create --driver=overlay --attachable test   test라는 이름의 네트워크를 생성해주었다.</description>
    </item>
    
    <item>
      <title>🐋 Docker swarm Orchestration</title>
      <link>http://minpeter.github.io/posts/server/2021-09-09-docker-swarm-orchestration/</link>
      <pubDate>Thu, 09 Sep 2021 11:12:00 +0900</pubDate>
      
      <guid>http://minpeter.github.io/posts/server/2021-09-09-docker-swarm-orchestration/</guid>
      <description>소개 해당 포스트는 도커안에 도커 (dind)기능을 이용해 로컬에서 클러스터와 유사한 환경을 구성하고,
docker swarm을 이용해 클러스터를 제어하는 Orchestration을 실습하는 방법에 대한 포스팅이다.
docker swarm, Orchestration이란? docker swarm은 kubernetes와 같은 Orchestration tool이다.
예를 들어 5대의 서버가 있다고 생각해보자
Orchestration tool을 사용하지 않을 경우는 각각 서버에 동일한 기능을 하도록 설정하거나, 각자 특정기능을 담당하는 식으로 설정해야될 것이다.
하지만 이 경우 특정 기능이나 서비스에 많은 요청이 들어올경우, 직접 수동으로 해당 서비스를 더 많이 만들어주어야 한다.</description>
    </item>
    
  </channel>
</rss>
